#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
const ll TROLL_NUM = 9099099909999099999;
const string TROLL_STR = "9099099909999099999";
const char* TROLL_CSTR = "9099099909999099999";

void gen_0(){
    printf("ONTAK 2010\n");
}

void gen_1(){
    string s = "Godzilla terrorizes Bajtoly lower again. Every day a monster comes out of the ocean, slow movement of marching through the city to some of the skyscrapers and eats it with people who are in it. Eating one skyscraper takes the whole day, at dusk, it returns to its hiding place hidden in the depths. To make matters worse, going through the city, Godzilla wags its tail and destroys towers, near the passes. The prospect of becoming a meal for an underwater monster, to discourage some residents spent in uncomfort- tion in the city. During the night of each tower is derived as a resident and flees to the countryside. In Bajtogrodzie skyscrapers were built only at street crossings. At each intersection there is exactly one building. Junctions are connected by two-way streets. In addition, a the junction is just above the ocean, this is where Godzilla begins its destructive journey through the city. During the investigation, the monster moves only in the streets. Godzilla noted that he must hurry up with the consumption of residents and carefully choose the skyscrapers devouring and streets, which reaches them. Of course, choosing never previously consumed or destroyed- wanego skyscraper. What is the maximum number of people who can eat before the city completely desolate? Entrance The first line of standard input contains two integers him (1 n 100 000, 0 500 000 m) respectively denoting the number of intersections in the city and the number of connecting streets. Crossroads numbers are numbered from 1 to n, junction 1 is located on the shores of the ocean. Next row contains a sequence of integers n s (0 s 100 000) to describe population skyscrapers at various intersections. In each of the next m rows are the two integers ai and bi (1 ai, bi n, ai = bi), which means that there is a road junction connecting ai and bi. The crossing number One can reach any other intersection in the city. Exit Write to stdout the number of people who eat Godzilla for the optimum choice of meals and roads through the city every day. Example For input: the result is correct: 5 5 11 1 3 2 4 7 1 2 1 3 2 3 2 4 3 5";
    char tmp[3000];
    for(int i=0; i<s.length(); ++i){
        int rep = 2932 - ((i*i)%2932);
        for(int j=0; j<rep; ++j) tmp[j] = s[i];
        tmp[rep] = 0;
        printf("%s", tmp);
    }
    printf("\n");
}

void gen_2(){
    unsigned long long MOD = TROLL_NUM;
    vector<unsigned long long> arr;
    arr.push_back(1);
    arr.push_back(1);
    for(int i=3; i<=10000; ++i) arr.push_back((arr[i-3]+arr[i-2])%MOD);
    for(int i=0; i<10000; ++i) printf("%llu, ", arr[i]);
    printf("0.\n");
}

void gen_3(){
    char ontak2010[5][63] = { ".####..##..##.######..##...##..##.....####...####..###..####.",
                              "##..##.###.##...##...####..##.##.....##..##.##..##..##.##..##",
                              "##..##.##.###...##..##..##.####.........##..##..##..##.##..##",
                              "##..##.##..##...##..######.##.##......##....##..##..##.##..##",
                              ".####..##..##...##..##..##.##..##....######..####...##..####." };

    for(int i=0; i<1024; ++i){
        for(int j=0; j<1024-i; ++j){
            if(506 <= i && i <= 510 && 449 <= j && j <= 509) printf("%c", ontak2010[i-506][j-449]);
            else printf("%c", (i&j)?'.':'#');
        }
        printf("\n");
    }
}

void gen_4(){
    int N = 1;
    for(int i=0; i<5000; ++i){
        for(int j=0; j<80; ++j){
            if(i==3333 && j==8){
                printf("%s", TROLL_CSTR);
                j += 18; N += 19; continue;
            }
            ++N;
            if(N>2 && N%2==0){ printf("1"); continue; }
            int div;
            for(div=3; div*div<=N; div+=2){
                if(N%div == 0) break;
            }
            printf("%c", (div*div>N)?'0':'1');
        }
        printf("\n");
    }
}

void gen_5(){
    map<int,string> numbers, years;
    vector<string> months = {"", "stycznia","lutego","marca","kwietnia","maja","czerwca","lipca","sierpnia","wrzesnia","pazdziernika","listopada","grudnia"};
    numbers[1 ] = "pierwszy";
    numbers[2 ] = "drugi";
    numbers[3 ] = "trzeci";
    numbers[4 ] = "czwarty";
    numbers[5 ] = "piaty";
    numbers[6 ] = "szosty";
    numbers[7 ] = "siodmy";
    numbers[8 ] = "osmy";
    numbers[9 ] = "dziewiaty";
    numbers[10] = "dziesiaty";
    numbers[11] = "jedenasty";
    numbers[12] = "dwunasty";
    numbers[13] = "trzynasty";
    numbers[14] = "czternasty";
    numbers[15] = "pietnasty";
    numbers[16] = "szesnasty";
    numbers[17] = "siedemnasty";
    numbers[18] = "osiemnasty";
    numbers[19] = "dziewietnasty";
    numbers[20] = "dwudziesty";
    numbers[30] = "trzydziesty";
    numbers[40] = "czterdziesty";
    numbers[50] = "piecdziesiaty";
    numbers[60] = "szescdziesiaty";
    numbers[70] = "siedemdziesiaty";
    numbers[80] = "osiemdziesiaty";
    numbers[90] = "dziewiecdziesiaty";
    vector<pair<string,string>> hundreds = {{"setny", "sto"}, {"dwusetny", "dwiescie"}, {"trzysetny", "trzysta"}};
    int month_day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    for(int i=21; i<=366; ++i){
        if(numbers.find(i) != numbers.end()) continue;
        numbers[i] = "";
        if(i%100==0){ numbers[i] = hundreds[i/100-1].first; continue; }
        if(i>100) numbers[i] = hundreds[i/100-1].second + " ";
        if(i%100 <= 20) numbers[i] += numbers[i%100];
        else if((i%100)%10 == 0) numbers[i] += numbers[(i%100)/10*10];
        else numbers[i] += numbers[(i%100)/10*10] + " " + numbers[i%10];
    }
    years[2000] = "dwutysiecznego";
    for(int i=2001; i<=2020; ++i){
        string tmp = numbers[i%1000]; int len = tmp.length();
        years[i] = "dwa tysiace " + (tmp[len-1]!='y'?tmp:tmp.substr(0, len-1)) + "ego";
    }
    int D=0, M=1, Y=2000, C=0;
    for(int i=1; i<=7671; ++i){
        // calculate D, M, Y, C
        ++C; ++D;
        if(D>month_day[M] || (D==29 && M==2 && !(Y%400==0 || (Y%4==0 && Y%100!=0)))){
            D = 1;
            ++M;
        }
        if(M>12){
            C = 1; D = 1; M = 1; ++Y;
        }
        // strange cases
        if(i==2648){ cout << "Pierwszego kwietnia jest prima aprilis.\n"; continue; }
        if(i==4901){ cout << "Pierwszego czerwca jest dzien dziecka.\n"; continue; }
        // (D) (M) to (C) dzien roku (Y).
        string Day = numbers[D]; Day[0] = ((char)Day[0])-'a'+'A';
        cout << Day << " " << months[M] << " to " << numbers[C] << " dzien roku " << years[Y] << ".\n";
    }
    cout << "Koniec.\n";
}

void gen_6(){
    ll fact[30]; fact[0] = 1;
    for(int i=1; i<=20; ++i) fact[i] = fact[i-1]*i;
    for(ll i=1; i<=20000; ++i){
        ll N = i*i*i*i;
        printf("T[%lld]=\"", N);
        --N;
        ll l=1;
        while(N>=fact[l]){
            N -= fact[l];
            ++l;
        }
        char str[26]; str[l] = 0;
        bool chk[26]; memset(chk, 0, sizeof(chk));
        for(int j=0; j<l; ++j){
            int c = N / fact[l-j-1];
            int p;
            for(p=0;c>=0;++p){
                if(!chk[p]) --c;
            }
            --p;
            str[j] = 'a' + p;
            chk[p] = true;
            N %= fact[l-j-1];
        }
        printf("%s\"\n", i==10000?TROLL_CSTR:str);
    }
}

void gen_7(){
    char final_string[800] = "0102010200102002102000102001020012000012000120010201020012012001200120010201200102010201200102010201010201020120012001201200122010020001200201020102010201020012001201200120012001200120012001200120012001201200120100200010200120120002002001002010200120000102010200012000201020010202000010200120200210200120020201020102010200100202010202010202001200100012002012001020120012001201020120021000020102000102000120220200120201020201020201020109099099909999099999020102001200120012010201020102012001201201020120102012002001020012001200120012000120012001200210200120000120012001201200120102001001001001010100101000020102010200102001020001";
    int final_len = strlen(final_string);
    vector<int> ternary; ternary.push_back(1);
    char S[500][1010]; memset(S, 0, sizeof(S));
    for(int i=0; i<492; ++i){
        for(int j=0; j<1000; ++j) S[i][j] = '.';
    }
    int x=0, y=0;
    for(int N=0; N<171; ++N){
        // print
        int print_length = 2;
        for(auto tmp : ternary)
            print_length += (tmp==1?4:7);
        if(y + print_length >= 1000){
            x += 6; y = 0;
        }
        for(int i=0; i<ternary.size(); ++i){
            int val = ternary[i];
            if(val == 0){
                S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
                S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
                S[x+2][y  ] = S[x+2][y+1] = S[x+2][y+4] = S[x+2][y+5] = '#';
                S[x+3][y  ] = S[x+3][y+1] = S[x+3][y+4] = S[x+3][y+5] = '#';
                S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = '#';
                y += 7; 
            }
            else if(val == 1){
                S[x  ][y  ] = S[x  ][y+1] = S[x  ][y+2] = '#';
                S[x+1][y+1] = S[x+1][y+2] = '#';
                S[x+2][y+1] = S[x+2][y+2] = '#';
                S[x+3][y+1] = S[x+3][y+2] = '#';
                S[x+4][y+1] = S[x+4][y+2] = '#';
                y += 4; 
            }
            else if(val == 2){
                S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
                S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
                S[x+2][y+3] = S[x+2][y+4] = '#';
                S[x+3][y+1] = S[x+3][y+2] = '#';
                S[x+4][y  ] = S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = S[x+4][y+5] = '#';
                y += 7; 
            }
        }
        S[x+3][y] = S[x+3][y+1] = S[x+4][y+1] = '#';
        y += 6;
        // calculate ternary
        int l = ternary.size();
        for(int i=0; i<l; ++i) ternary[i] *= 2;
        for(int i=0; i<l; ++i){
            if(i == l-1 && ternary[i] >= 3)
                ternary.push_back(0);
            ternary[i+1] += ternary[i]/3;
            ternary[i] %= 3;
        }
    }
    S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
    S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
    S[x+2][y  ] = S[x+2][y+1] = S[x+2][y+4] = S[x+2][y+5] = '#';
    S[x+3][y  ] = S[x+3][y+1] = S[x+3][y+4] = S[x+3][y+5] = S[x+3][y+7] = S[x+3][y+8] = '#';
    S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = S[x+4][y+7] = S[x+4][y+8] = '#';
    x += 7; y = 0;
    // print final 4 lines
    for(int i=0; i<final_len; ++i){
        int val = final_string[i];
        if(val == '0'){
            if(y+7>1000){ x += 6; y = 0; }
            S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
            S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
            S[x+2][y  ] = S[x+2][y+1] = S[x+2][y+4] = S[x+2][y+5] = '#';
            S[x+3][y  ] = S[x+3][y+1] = S[x+3][y+4] = S[x+3][y+5] = '#';
            S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = '#';
            y += 7; 
        }
        else if(val == '1'){
            if(y+4>1000){ x += 6; y = 0; }
            S[x  ][y  ] = S[x  ][y+1] = S[x  ][y+2] = '#';
            S[x+1][y+1] = S[x+1][y+2] = '#';
            S[x+2][y+1] = S[x+2][y+2] = '#';
            S[x+3][y+1] = S[x+3][y+2] = '#';
            S[x+4][y+1] = S[x+4][y+2] = '#';
            y += 4; 
        }
        else if(val == '2'){
            if(y+7>1000){ x += 6; y = 0; }
            S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
            S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
            S[x+2][y+3] = S[x+2][y+4] = '#';
            S[x+3][y+1] = S[x+3][y+2] = '#';
            S[x+4][y  ] = S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = S[x+4][y+5] = '#';
            y += 7; 
        }
        else if(val == '9'){
            if(y+7>1000){ x += 6; y = 0; }
            S[x  ][y+1] = S[x  ][y+2] = S[x  ][y+3] = S[x  ][y+4] = '#';
            S[x+1][y  ] = S[x+1][y+1] = S[x+1][y+4] = S[x+1][y+5] = '#';
            S[x+2][y+1] = S[x+2][y+2] = S[x+2][y+3] = S[x+2][y+4] = S[x+2][y+5] = '#';
            S[x+3][y+4] = S[x+3][y+5] = '#';
            S[x+4][y+1] = S[x+4][y+2] = S[x+4][y+3] = S[x+4][y+4] = '#';
            y += 7; 
        }
    }
    for(int i=0; i<492; ++i){
        printf("%s\n", S[i]);
    }
}

void gen_8(){
    string str
    char S[1010][1010];
    memset(S, 0, sizeof(S));
    for(int i=0; i<1000; ++i)
        for(int j=0; j<1000; ++j) S[i][j] = '.';
    int x=500, y=500; S[x][y] = '#';
    for(auto t : str){
        if(t=='1') x += -1, y +=  0;
        if(t=='2') x += +1, y +=  0;
        if(t=='3') x +=  0, y += -1;
        if(t=='4') x +=  0, y += +1;
        if(t=='5') x += -1, y += -1;
        if(t=='6') x += -1, y += +1;
        if(t=='7') x += +1, y += -1;
        if(t=='8') x += +1, y += +1;
        S[x][y] = '#';
    }
    for(int i=0; i<1000; ++i) printf("%s\n", S[i]);
}

void gen_9(){
    struct A{
        int x, y;
        int type, len;
    };
    vector<A> Lines = {{1,812,2,131},{2,544,1,443},{13,488,1,48},{15,636,0,875},{21,110,2,55},{22,506,0,764},{24,146,0,845},{27,388,1,117},{28,475,2,44},{38,296,0,208},{39,840,0,612},{42,76,0,330},{42,408,0,153},{46,258,0,65},{47,790,1,213},{48,0,1,20},{50,872,2,529},{54,398,0,62},{55,703,1,231},{59,233,2,234},{62,96,0,175},{63,854,1,149},{64,0,1,297},{64,657,2,298},{65,428,0,751},{66,246,0,279},{68,637,3,9},{69,824,0,303},{70,50,3,832},{72,661,2,258},{77,856,0,723},{80,70,1,864},{83,124,0,506},{90,396,0,43},{91,612,0,818},{92,643,3,257},{98,84,3,371},{99,507,1,5},{99,831,2,193},{103,736,0,124},{106,202,0,44},{106,590,3,413},{108,827,3,176},{109,670,0,93},{112,674,0,658},{121,898,0,419},{124,678,1,325},{125,0,1,913},{128,454,1,7},{129,484,0,708},{130,477,2,160},{131,707,3,95},{135,680,1,131},{136,734,0,263},{141,872,1,117},{143,151,2,152},{143,362,1,198},{149,816,0,502},{150,620,3,203},{154,916,3,87},{157,429,1,510},{158,198,0,428},{163,328,0,264},{164,207,2,30},{167,611,1,311},{173,978,3,25},{175,978,1,25},{176,0,1,315},{177,696,0,302},{179,956,0,759},{180,122,0,791},{182,347,1,271},{188,374,1,203},{191,373,2,4},{194,391,2,217},{195,24,0,550},{199,592,2,305},{201,470,3,468},{202,0,3,334},{205,767,1,137},{207,564,0,764},{208,236,0,487},{212,676,3,30},{215,895,2,74},{218,780,0,426},{226,55,2,56},{227,302,1,236},{229,348,0,294},{230,556,3,447},{237,412,2,413},{238,84,1,164},{242,238,3,186},{245,0,3,46},{253,303,2,304},{256,756,0,323},{257,724,1,279},{258,0,1,222},{259,853,2,250},{260,215,3,629},{260,964,2,307},{261,356,1,602},{264,760,0,57},{268,874,1,40},{278,345,1,109},{282,570,0,514},{283,454,0,627},{283,553,1,346},{284,1002,2,295},{288,0,3,408},{289,401,3,415},{291,849,2,585},{295,1002,2,245},{297,183,2,112},{297,192,0,187},{297,1002,2,163},{298,670,1,333},{299,0,1,183},{301,338,3,148},{302,274,0,570},{305,292,3,568},{306,312,3,127},{306,580,3,150},{306,811,2,120},{307,102,0,457},{312,326,0,385},{314,197,1,3},{320,739,2,136},{321,332,0,557},{324,715,2,551},{324,887,1,116},{325,0,1,340},{325,450,0,622},{325,677,2,226},{345,810,0,563},{352,839,3,129},{359,586,0,23},{362,943,1,60},{363,0,1,755},{369,501,1,163},{369,839,2,458},{376,314,0,118},{381,772,2,183},{384,706,1,102},{385,26,0,177},{390,941,2,451},{396,724,3,279},{397,572,3,301},{400,746,0,188},{406,632,0,225},{413,571,2,341},{415,99,2,100},{417,217,2,73},{420,966,1,37},{421,0,1,205},{421,505,2,332},{423,604,0,438},{426,643,2,323},{427,800,0,203},{429,208,3,454},{434,944,0,48},{436,284,1,301},{438,384,2,265},{443,322,2,79},{453,302,3,183},{456,448,3,199},{466,686,0,3},{466,688,1,315},{467,0,1,95},{468,675,1,55},{470,958,0,57},{473,778,1,81},{474,261,1,127},{474,867,3,136},{480,719,2,74},{486,50,1,437},{491,119,2,114},{502,480,2,57},{512,995,2,73},{513,478,1,12},{517,455,3,127},{517,1002,2,49},{518,538,0,466},{519,166,0,368},{523,0,3,108},{524,562,3,291},{525,830,1,173},{526,0,1,214},{526,878,1,125},{527,0,1,462},{529,515,3,143},{542,590,2,89},{544,376,0,229},{552,474,0,397},{555,16,3,171},{559,1002,2,152},{561,69,1,285},{564,224,3,142},{564,444,3,216},{569,881,2,297},{574,964,0,33},{576,278,1,457},{577,514,1,29},{577,618,0,371},{579,858,3,145},{584,606,0,183},{587,860,0,34},{592,607,1,396},{593,0,1,36},{606,244,1,652},{614,0,3,90},{619,446,1,264},{620,832,0,259},{621,410,1,231},{622,490,3,24},{624,852,3,151},{627,348,3,160},{651,987,1,16},{652,0,1,518},{652,1002,2,109},{654,266,0,273},{654,483,3,19},{657,502,3,200},{679,0,0,3},{680,1,1,29},{681,2,3,173},{682,1,3,100},{684,488,1,59},{691,349,3,80},{696,393,2,3},{696,764,0,196},{698,402,0,13},{698,523,1,131},{710,610,0,39},{711,377,2,94},{717,222,1,370},{718,596,2,218},{728,0,3,181},{736,607,3,231},{742,294,3,137},{746,38,1,324},{750,544,3,158},{751,552,0,136},{753,444,1,559},{754,0,1,84},{755,180,0,67},{772,355,2,133},{772,969,2,223},{779,0,3,116},{782,980,3,23},{783,793,3,55},{794,990,0,43},{809,0,3,175},{812,76,3,55},{832,775,1,147},{833,898,0,140},{834,204,1,7},{836,327,3,71},{856,360,1,466},{857,523,1,16},{858,295,1,171},{890,529,2,95},{893,103,3,87},{894,84,3,52},{901,566,3,19},{917,688,1,190},{919,674,2,23},{921,934,1,69},{922,0,1,300},{926,463,2,59},{935,371,1,279},{938,625,3,59},{942,174,3,58},{951,403,3,9},{957,524,0,19},{960,601,1,245},{967,903,2,11},{992,197,1,747},{994,583,1,420},{995,0,1,46}};
    char S[1010][1010];
    memset(S, 0, sizeof(S));
    for(int i=0; i<1003; ++i)
        for(int j=0; j<1003; ++j) S[i][j] = '.';
    for(auto tmp : Lines){
        int i = tmp.x, j = tmp.y, t = tmp.type, l = tmp.len;
        for(;l--;){
            S[i][j] = '#';
            if(t==0) i+=1;
            if(t==1) j+=1;
            if(t==2) i+=1,j-=1;
            if(t==3) i+=1,j+=1;
        }
    }
    for(int i=0; i<1003; ++i) printf("%s\n", S[i]);
}

void gen_10(){
    vector<int> V = {0, 1};
    int bef=1;
    char pad6[7]="      ",pad7[8]="       ";
    printf("a_i = a_{i-1} . a_{i-2}\n\n");
    printf("a_1 = 0\n\n");
    printf("a_2 = 0 1\n\n");
    for(int N = 3; N <= 30; ++N){
        
        int tmp = V.size();
        for(int i=0; i<bef; ++i) V.push_back(V[i]);
        bef = tmp;

        if(N <= 15){
            printf("a_%d = ", N);
            for(int i=0; i<V.size(); ++i){
                if(i>0 && i%40 == 0) printf("\n%s", N>=10?pad7:pad6);
                if(i == V.size()-1) printf("%d\n\n", V[i]);
                else printf("%d ", V[i]);
            }
        }
    }
    // (A_i)^3 = B_i
    printf("\n(A_i)^n = B_i (mod 2)\n\n");
    vector<vector<int>> A, B, C, T;
    for(int S=1; S<=70; ++S){
        A.clear(); B.clear(); C.clear(); T.clear();
        for(int i=0; i<S; ++i){
            A.push_back(vector<int>());
            T.push_back(vector<int>());
            B.push_back(vector<int>());
            C.push_back(vector<int>());
            for(int j=0; j<S; ++j){
                A[i].push_back(V[i*S+j]);
                T[i].push_back(V[i*S+j]);
                B[i].push_back(i==j?1:0);
                C[i].push_back(0);
            }
        }
        ll p = TROLL_NUM;
        while(p){
            if(p&1){
                for(int i=0; i<S; ++i){
                    for(int j=0; j<S; ++j){
                        C[i][j] = 0;
                        for(int k=0; k<S; ++k){
                            C[i][j] ^= (T[i][k]&B[k][j]);
                        }
                    }
                }
                for(int i=0; i<S; ++i){
                    for(int j=0; j<S; ++j){
                        B[i][j] = C[i][j];
                    }
                }
            }
            for(int i=0; i<S; ++i){
                for(int j=0; j<S; ++j){
                    C[i][j] = 0;
                    for(int k=0; k<S; ++k){
                        C[i][j] ^= (T[i][k]&T[k][j]);
                    }
                }
            }
            for(int i=0; i<S; ++i){
                for(int j=0; j<S; ++j){
                    T[i][j] = C[i][j];
                }
            }
            p/=2;
        }
        for(int i=0; i<S; ++i){
            if(i==S/2) printf("A_%d = ", S);
            else printf("%s", S>=10?pad7:pad6);
            for(int j=0; j<S; ++j) printf("%d ", A[i][j]);
            if(i==S/2) printf("  B_%d = ", S);
            else printf("  %s", S>=10?pad7:pad6);
            for(int j=0; j<S; ++j){
                if(j==S-1) printf("%d\n", B[i][j]);
                else printf("%d ", B[i][j]);
            }
        }
        printf("\n");
    }
}

int main()
{
    int tc;
    scanf("%d", &tc);
    if(tc==0)  gen_0();
    if(tc==1)  gen_1();
    if(tc==2)  gen_2();
    if(tc==3)  gen_3();
    if(tc==4)  gen_4();
    if(tc==5)  gen_5();
    if(tc==6)  gen_6();
    if(tc==7)  gen_7();
    if(tc==8)  gen_8();
    if(tc==9)  gen_9();
    if(tc==10) gen_10();
    return 0;
}